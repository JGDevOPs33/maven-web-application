pipeline {
    agent any

    environment {
        MAVEN_HOME = '/usr/share/maven'
        JAVA_HOME = '/usr/lib/jvm/java-8-openjdk-amd64'
        PATH = "$MAVEN_HOME/bin:$JAVA_HOME/bin:$PATH"
        SONAR_HOST_URL = 'http://your-sonarqube-server:9000'
        NEXUS_REPO_URL = 'http://your-nexus-server/repository/maven-releases'
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Unit Test') {
            steps {
                sh 'mvn clean test'
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('Code Quality Analysis with SonarQube') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Upload Artifacts to Nexus') {
            steps {
                script {
                    def nexusCredentials = credentials('Nexus_Credentials_ID')
                    sh """
                        mvn deploy:deploy-file \
                        -Durl=${NEXUS_REPO_URL} \
                        -DrepositoryId=nexus \
                        -Dfile=target/your-artifact.jar \
                        -DgroupId=com.example \
                        -DartifactId=your-artifact \
                        -Dversion=1.0.0 \
                        -Dpackaging=jar
                    """
                }
            }
        }

        stage('Containerize with Docker') {
            steps {
                sh 'docker build -t your-docker-image:1.0.0 .'
            }
        }

        stage('Provision with Terraform') {
            steps {
                sh 'terraform init'
                sh 'terraform apply -auto-approve'
            }
        }

        stage('Configuration with Ansible') {
            steps {
                sh 'ansible-playbook -i inventory.ini your-playbook.yml'
            }
        }

        stage('Orchestration with Kubernetes, Kops, and Helm') {
            steps {
                sh 'kops create cluster --name your-cluster-name'
                sh 'kops update cluster --name your-cluster-name'
                sh 'kops validate cluster --name your-cluster-name'
                sh 'helm install your-helm-chart ./path/to/chart'
            }
        }
    }

    post {
        always {
            stage('Cleanup') {
                steps {
                    sh 'docker rmi your-docker-image:1.0.0'
                }
            }
        }
    }
}
